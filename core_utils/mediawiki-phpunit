#!/usr/bin/env bash

WSL_CORE="/srv/mediawiki/core"
REAL_PATH=$(realpath "$0")
CORE_UTILS_DIR=$(dirname "$REAL_PATH")
BASE_DIR=$(dirname "$CORE_UTILS_DIR")
SCRIPT_BASENAME=$(basename "$REAL_PATH")
TMP_SUBDIR_NAME="mediawiki-phpunit"

COMMAND=$1
shift 1
declare -a ARGS=("$@")

function print_usage() {
    echo "Usage: ${SCRIPT_BASENAME} <dev|srv|srv_parallel>"
}

function prepare_tmpfs_temp_dir() {
    local TMPDIR_MOUNT=$1
    local TMPDIR_MEDIAWIKI="${TMPDIR_MOUNT}/${TMP_SUBDIR_NAME}"

    if [ ! -d "${TMPDIR_MOUNT}" ]; then
        echo "Invalid temp file mount path: ${TMPDIR_MOUNT}" >&2
        exit 127
    fi

	echo -n "Clearing '${TMPDIR_MEDIAWIKI}'..."
	sudo -u www-data mkdir -p "${TMPDIR_MEDIAWIKI}"
	sudo -u www-data -H rm -rf "${TMPDIR_MEDIAWIKI}/*" || exit $?
	echo "done"
}

function sync_wsl_mediawiki_dir() {
    # Make sure ~/bin/git is used for Linux/WIN32 executable selection
    sudo -u www-data --preserve-env=DEV_MW_DIR,SRV_MW_DIR "${BASE_DIR}/utils/sync-wsl-mediawiki"
}

function execute_mediawiki_phpunit() {
    local MEDIAWIKI_DIR=$1
    local TMPFS_DIR=$2
    (
    	set -e

        cd "$MEDIAWIKI_DIR"
        exec sudo TMPDIR="${TMPFS_DIR}" -u www-data -H \
            php "./tests/phpunit/phpunit.php" --colors=always "${ARGS[@]}" 2>&1
    )
}

function execute_mediawiki_paratest() {
    local MEDIAWIKI_DIR=$1
    local TMPFS_DIR=$2
    local PHP_ARGS="-d display_errors=stderr"
    local PARATEST_BIN=""

    PARATEST_BIN=$(which paratest)
    if [ -z "${PARATEST_BIN}" ]; then
    	echo "Could not find paratest; is composer/vendor/bin in PATH?"
    	exit 1
	fi

	if [ -d /opcache/php ]; then
		echo "Using shared OPCache directory: /opcache/php"
		PHP_ARGS+=" -d opcache.enable=1"
		PHP_ARGS+=" -d opcache.enable_cli=1"
		PHP_ARGS+=" -d opcache.file_cache=/opcache/php"
		PHP_ARGS+=" -d opcache.file_cache_only=1"
	fi

    (
    	set -e

        cd "$MEDIAWIKI_DIR"

        # XXX: ugly work-around poorly divided suites
        if [ "${BASE_DIR}/config/mw_core_suite.xml" -nt "./tests/phpunit/mw_core_suite.xml" ]; then
            sudo -u www-data -H cp "${BASE_DIR}/config/mw_core_suite.xml" "./tests/phpunit/"
        fi
		# XXX: work around sqlite DB concurrency limitations
        if [ "${BASE_DIR}/config/ParatestWrapperSettings.php" -nt "./ParatestWrapperSettings.php" ]; then
            sudo -u www-data -H cp "${BASE_DIR}/config/ParatestWrapperSettings.php" "./"
        fi

        exec sudo TMPDIR="${TMPFS_DIR}" -u www-data -H "${PARATEST_BIN}" \
            --phpunit="tests/phpunit/phpunit.php" \
            --configuration="tests/phpunit/mw_core_suite.xml" \
            --bootstrap="${BASE_DIR}/config/dummy.php" \
            --parallel-suite \
            --runner Runner \
            --colors \
            --passthru-php="${PHP_ARGS}" \
            --passthru="--conf=ParatestWrapperSettings.php --colors=always ${ARGS[*]}" 2>&1
    )
}

# Try to use a tmpfs for temporary test files
if [ "$(findmnt -no fstype -T /tmp 2>/dev/null)" == "tmpfs" ]; then
	TMPDIR_MOUNT="/tmp"
elif [ "$(findmnt -no fstype -T /tmp-phpunit 2>/dev/null)" == "tmpfs" ]; then
	TMPDIR_MOUNT="/tmp-phpunit"
else
	TMPDIR_MOUNT="/tmp"
	echo "Temporary directory is not a tmpfs; tests might be slow" >&2
fi

# Note that the "development path" just means $PWD
case $COMMAND in
"dev" | "")
    prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
    execute_mediawiki_phpunit . "${TMPDIR_MOUNT}" | less -R
    ;;
"dev_parallel")
    prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
    execute_mediawiki_paratest . "${TMPDIR_MOUNT}" | less -R
    ;;
"srv")
    sync_wsl_mediawiki_dir || exit $?
    prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
    execute_mediawiki_phpunit "${WSL_CORE}" "${TMPDIR_MOUNT}" | less -R
    ;;
"srv_parallel")
    sync_wsl_mediawiki_dir || exit $?
    prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
    execute_mediawiki_paratest "${WSL_CORE}" "${TMPDIR_MOUNT}" | less -R
    ;;
*)
    echo "Invalid command: ${COMMAND}" >&2
    print_usage
    exit 127
    ;;
esac
