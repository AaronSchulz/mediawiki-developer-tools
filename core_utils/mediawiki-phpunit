#!/usr/bin/env bash

REAL_PATH=$(realpath "$0")
CORE_UTILS_DIR=$(dirname "$REAL_PATH")
BASE_DIR=$(dirname "$CORE_UTILS_DIR")
SCRIPT_BASENAME=$(basename "$REAL_PATH")

COMMAND=$1

declare -i TEST_RUN_NO=$(od -A n -t u -N 4 /dev/urandom)
TMP_SUBDIR_PREFIX="mw-phpunit"
TMP_SUBDIR_NAME="${TMP_SUBDIR_PREFIX}.${TEST_RUN_NO}"

shift 1
declare -a ARGS=("$@")

function print_usage() {
	echo "Usage: ${SCRIPT_BASENAME} <dev_phpunit|dev_paratest|srv_phpunit|srv_paratest>"
}

function prepare_mw_temp_dir() {
	local TMPDIR_MOUNT=$1
	local MW_TMPDIR="${TMPDIR_MOUNT}/${TMP_SUBDIR_NAME}"

	if [ ! -d "${TMPDIR_MOUNT}" ]; then
		echo "Invalid temp file mount path: ${TMPDIR_MOUNT}" >&2
		exit 127
	fi

	echo -n "Preparing '${MW_TMPDIR}'..."
	if [ ! -d "${MW_TMPDIR}" ]; then
	  sudo -u www-data mkdir -p "${MW_TMPDIR}" || exit $?
  fi
	echo "done"
}

function clean_mw_temp_dir() {
	local TMPDIR_MOUNT=$1
	local MW_TMPDIR="${TMPDIR_MOUNT}/${TMP_SUBDIR_NAME}"

	echo -n "Clearing '${MW_TMPDIR}'..."
	if [ -d "${MW_TMPDIR}" ]; then
		sudo -u www-data rm -rf "${MW_TMPDIR}" || exit $?
	fi
	echo "done"

	echo -n "Clearing orphaned files in '${TMPDIR_MOUNT}'..."
	find "${TMPDIR_MOUNT}" -name "${TMP_SUBDIR_PREFIX}.*" -type f -mmin +60 -delete
	echo "done"
}

function prepare_mw_paratest_phpunit_config() {
  prepare_mw_paratest_phpunit_config_file "$1" "mwp_phpunit.xml.dist"
  prepare_mw_paratest_phpunit_config_file "$1" "tests/phpunit/mwp_suite.xml"
}

function prepare_mw_paratest_phpunit_config_file() {
	local MW_CORE_DIR=$1
	local FILE_RELPATH=$2
	# XXX: ugly work-around poorly divided suites
	echo -n "Creating '${MW_CORE_DIR}/${FILE_RELPATH}'..."
	(
		set -e
    declare -a SUITE_PATHS
    declare -A SIZE_BY_PATH
    declare -i SUBSUITE_MAX_KB
		declare -i SUBSUITE_MAX_PATHS
    declare -i INDEX
    declare -i SUITE_KB
    declare -i SUBSUITE_KB
    declare -a SUBSUITE_TAGS
    declare -a SUBSUITES
    declare -a AUTO_SUITES
    local XML=""
    local SUITE_FILE_XML=""
    local OUTPUT_BASE_PATH=""
    cd "${MW_CORE_DIR}/tests/phpunit"

    SUITE_FILE_XML="$(cat "${MW_CORE_DIR}/tests/phpunit/suite.xml")"
    if [[ "$(dirname "${FILE_RELPATH}")" == "." ]]; then
      OUTPUT_BASE_PATH="tests/phpunit/"
    fi

    for suite in $(find * -maxdepth 0 -type d); do
      if [[ "${suite}" =~ ^(data|docs|mocks|suites)$ ]]; then
        continue
      fi
      SUITE_KB=0
      SUITE_PATHS=()
      SIZE_BY_PATH=()
      while IFS=$'\t\n' read -r relative_path size && CODE=$?; do
        relative_path="${OUTPUT_BASE_PATH}${relative_path}"
        SUITE_KB=$((SUITE_KB + size))
        SUITE_PATHS+=("${relative_path}")
        SIZE_BY_PATH[$relative_path]="${size}"
      done < <(
        find "${suite}" \( -name '*Test.php' -o -name 'Test*.php' \) -printf '%p\t%k\n' | \
        sort -k2,2nr -k1,1
      )
      [[ $CODE -eq 0 ]] || exit 2

      # Run order hack for MediaWikiIntegrationTestCaseSchema2Test
      if [[ "${suite}" =~ ^(tests)$ ]]; then
        SUBSUITE_MAX_KB=1000000000
        SUBSUITE_MAX_PATHS=1000000000
      else
        SUBSUITE_MAX_KB=$((SUITE_KB / 100))
        SUBSUITE_MAX_KB=$((SUBSUITE_MAX_KB < 16 ? 16 : SUBSUITE_MAX_KB))
        SUBSUITE_MAX_PATHS=$(max_files_per_subsuite "${#SUITE_PATHS[@]}")
        SUBSUITE_MAX_PATHS=$((SUBSUITE_MAX_PATHS < 1 ? 1 : SUBSUITE_MAX_PATHS))
      fi

      SUBSUITES=()
      INDEX=0
      SUBSUITE_KB=0
      SUBSUITE_TAGS=()
      for relative_path in "${SUITE_PATHS[@]}"; do
        SUBSUITE_KB=$((SUBSUITE_KB + ${SIZE_BY_PATH[$relative_path]}))
        relative_path=${relative_path//</&lt;}
        relative_path=${relative_path//>/&gt;}
        SUBSUITE_TAGS+=("<file>${relative_path}</file>")
        if [ ${#SUBSUITE_TAGS[@]} -ge $SUBSUITE_MAX_PATHS ] || [ $SUBSUITE_KB -ge $SUBSUITE_MAX_KB ]; then
          printf -v XML "%s\n\t\t\t" "${SUBSUITE_TAGS[@]}"
          XML="${XML%$'\n\t\t\t'}"
          SUBSUITES+=("<testsuite name=\"${suite}_${INDEX}\">"$'\n\t\t\t'"${XML}"$'\n\t\t'"</testsuite>")
          INDEX=$((INDEX+1))
          SUBSUITE_KB=0
          SUBSUITE_TAGS=()
        fi
      done
      if [ ${#SUBSUITE_TAGS[@]} -gt 0 ]; then
        printf -v XML "%s\n\t\t\t" "${SUBSUITE_TAGS[@]}"
        XML="${XML%$'\n\t\t\t'}"
        SUBSUITES+=("<testsuite name=\"${suite}_${INDEX}\">"$'\n\t\t\t'"${XML}"$'\n\t\t'"</testsuite>")
      fi

      if [ ${#SUBSUITES[@]} -gt 0 ]; then
        printf -v XML "%s\n\t\t" "${SUBSUITES[@]}"
        XML="${XML%$'\n\t\t'}"
        AUTO_SUITES+=("${XML}")
      fi
    done

    printf -v XML "%s\n\t\t" "${AUTO_SUITES[@]}"
    XML="${XML%$'\n\t\t'}"
    XML="<testsuites>"$'\n\t\t'"${XML}"$'\n\t'"</testsuites>"

    SUITE_FILE_XML="${SUITE_FILE_XML/<testsuites>*<\/testsuites>/$XML}"
    echo "${SUITE_FILE_XML}" | sudo -u www-data sh -c "cat > ""${MW_CORE_DIR}/${FILE_RELPATH}"""
  ) || exit $?
	echo "done"
}

function clean_mw_paratest_phpunit_config() {
  clean_mw_paratest_phpunit_config_file "$1" "mwp_phpunit.xml.dist"
  clean_mw_paratest_phpunit_config_file "$1" "tests/phpunit/mwp_suite.xml"
}

function clean_mw_paratest_phpunit_config_file() {
	local MW_CORE_DIR=$1
	local FILE_RELPATH=$2

	# XXX: ugly work-around poorly divided suites
	echo -n "Removing '${MW_CORE_DIR}/${FILE_RELPATH}'..."
  sudo -u www-data rm -f "${MW_CORE_DIR}/${FILE_RELPATH}"
	echo "done"
}

function sync_srv_mediawiki() {
	# Make sure ~/bin/git is used for Linux/WIN32 executable selection
	sudo -u www-data -H --preserve-env=DEV_MW_DIR,SRV_MW_DIR "${BASE_DIR}/utils/sync-srv-mediawiki"
}

function get_preserved_variables() {
  # Preserve environmental variables used to select test backends
  printenv | grep -Po '(MW_INSTALL_PATH|MW_DB|PHPUNIT_[^=]+)' | sed ':a;N;$!ba;s/\n/,/g'
}

function max_files_per_subsuite() {
  declare -i REMNANT=$1
  declare -i LOG=-1;
  while [ $REMNANT -gt 0 ]; do
    LOG=$((LOG + 1 ))
    REMNANT=$((REMNANT / 4))
  done
  echo "${LOG}"
}

function execute_mw_phpunit() {
	local MW_CORE_DIR=$1
	local TMPFS_DIR=$2
	local MW_TMPDIR="${TMPFS_DIR}/${TMP_SUBDIR_NAME}"
	local MW_LOGDIR="${MW_TMPDIR}/logs"

	(
		set -e
		cd "${MW_CORE_DIR}"

		PRESERVE_ENV=$(get_preserved_variables)
		if [ -n "${PRESERVE_ENV}" ]; then
		  echo "Environmental variables: ${PRESERVE_ENV}"
		fi

		if [ -x "${MW_CORE_DIR}/vendor/bin/phpunit" ]; then
			exec sudo -u www-data -H --preserve-env="${PRESERVE_ENV}" \
				env TMPDIR="${MW_TMPDIR}" MW_INSTALL_PATH="${MW_CORE_DIR}" MW_LOG_DIR="${MW_LOGDIR}" \
				php "${PHP_ARGS[@]}" "${MW_CORE_DIR}/vendor/bin/phpunit" \
				-c "tests/phpunit/suite.xml" \
				--cache-result-file="${PHPUNIT_CACHE_FILE}" \
				--colors=always \
				"${PHPUNIT_ARGS[@]}" 2>&1
		else
			exec sudo -u www-data -H --preserve-env="${PRESERVE_ENV}" \
				env TMPDIR="${MW_TMPDIR}" MW_INSTALL_PATH="${MW_CORE_DIR}" MW_LOG_DIR="${MW_LOGDIR}" \
				php "${PHP_ARGS[@]}" "${MW_CORE_DIR}/tests/phpunit/phpunit.php" \
				--cache-result-file="${PHPUNIT_CACHE_FILE}" \
				--colors=always \
				"${PHPUNIT_ARGS[@]}" 2>&1
		fi
	)
}

function execute_mw_paratest() {
	local MW_CORE_DIR=$1
	local TMPFS_DIR=$2
	local PARATEST_BIN="",
	local PRESERVE_ENV=""
	local MW_TMPDIR="${TMPFS_DIR}/${TMP_SUBDIR_NAME}"
	local PROCESSES=$((1 * $(nproc --all)))

	(
		set -e
		cd "${MW_CORE_DIR}"

		# XXX: work around sqlite DB concurrency limitations
		if ! tail -1 './LocalSettings.php' | grep 'ParatestSettings.php' -q; then
		  echo "ParatestSettings.php must be required in the last LocalSettings.php line"
		  exit 1
		fi

    # Preserve environmental variables used to select test backends
		PRESERVE_ENV=$(get_preserved_variables)
		if [ -n "${PRESERVE_ENV}" ]; then
		  echo "Environmental variables detected: ${PRESERVE_ENV}"
		fi

    if [ -x "${MW_CORE_DIR}/vendor/bin/paratest" ]; then
      exec sudo -u www-data -H \
        --preserve-env="${PRESERVE_ENV}" \
        env TEST_RUN_NO="${TEST_RUN_NO}" TMPDIR="${MW_TMPDIR}" MW_INSTALL_PATH="${MW_CORE_DIR}" \
        php "${MW_CORE_DIR}/vendor/bin/paratest" \
        --configuration="mwp_phpunit.xml.dist" \
        --tmp-dir="${MW_TMPDIR}" \
        --processes="${PROCESSES}" \
        --runner="Runner" \
        --parallel-suite \
        --colors="always" \
        --passthru-php="${PHP_ARGS[*]}" \
        --passthru="${PHPUNIT_ARGS[*]}"
    elif [ -x "${HOME}/bin/paratest" ]; then
      # XXX: use the custom phpunit.php for proper bootstrapping and handling of --conf.
      # Since this already takes care of bootstrapping via MediaWikiPHPUnitCommand, give
      # paratest a dummy bootstrap file in order to avoid shutdown warnings.
      exec sudo -u www-data -H \
        --preserve-env="${PRESERVE_ENV}" \
        env TEST_RUN_NO="${TEST_RUN_NO}" TMPDIR="${MW_TMPDIR}" MW_INSTALL_PATH="${MW_CORE_DIR}" \
        php "${HOME}/bin/paratest" \
        --phpunit="${MW_CORE_DIR}/vendor/bin/phpunit" \
        --configuration="tests/phpunit/mwp_suite.xml" \
        --bootstrap="${MW_CORE_DIR}/tests/phpunit/bootstrap.integration.php" \
        --tmp-dir="${MW_TMPDIR}" \
        --processes="${PROCESSES}" \
        --runner="Runner" \
        --parallel-suite \
        --colors \
        --passthru-php="${PHP_ARGS[*]}" \
        --passthru="${PHPUNIT_ARGS[*]}" \
        --verbose="$(($VERBOSE))"
    else
      echo "Could not find paratest at '${PARATEST_BIN}'"
      exit 1
    fi
	)
}

declare TMPDIR_MOUNT
# Try to use a tmpfs for temporary test files
if [ "$(findmnt -no fstype -T /tmp 2>/dev/null)" == "tmpfs" ]; then
	TMPDIR_MOUNT="/tmp"
	echo "Using main tmpfs directory: /tmp"
elif [ "$(findmnt -no fstype -T /tmp-phpunit 2>/dev/null)" == "tmpfs" ]; then
	TMPDIR_MOUNT="/tmp-phpunit"
	echo "Using dedicated tmpfs directory: /tmp-phpunit"
else
	TMPDIR_MOUNT="/tmp"
	echo "Temporary directory is not a tmpfs; tests might be slow" >&2
fi
declare PHPUNIT_CACHE_FILE="${TMPDIR_MOUNT}/mw-phpunit-cache.${COMMAND}"

declare -a PHP_ARGS
# Optimize execution via OPCache (see opcache-cli.ini)
if [ -d /opcache/php ]; then
	echo "Detected shared OPCache directory: /opcache/php"
fi

declare -a PHPUNIT_ARGS
PHPUNIT_ARGS+=("--cache-result-file=${PHPUNIT_CACHE_FILE}")
if [ ${#ARGS[@]} -gt 0 ]; then
  PHPUNIT_ARGS=(${PHPUNIT_ARGS[@]} ${ARGS[@]})
fi

# Note that the "development path" just means $PWD in this context.
# This allows for easy testing of multiple checkouts of MediaWiki.
case $COMMAND in
"dev_phpunit")
  DEV_MW_CORE=$(realpath $PWD)
	prepare_mw_temp_dir "${TMPDIR_MOUNT}" || exit $?
	execute_mw_phpunit "${DEV_MW_CORE}" "${TMPDIR_MOUNT}" 2>&1 | less -R
	clean_mw_temp_dir "${TMPDIR_MOUNT}"
	;;
"dev_paratest")
  DEV_MW_CORE=$(realpath $PWD)
	prepare_mw_temp_dir "${TMPDIR_MOUNT}" || exit $?
	prepare_mw_paratest_phpunit_config "${DEV_MW_CORE}" || exit $?
	execute_mw_paratest "${DEV_MW_CORE}" "${TMPDIR_MOUNT}" 2>&1 | less -R
	clean_mw_paratest_phpunit_config "${DEV_MW_CORE}"
	clean_mw_temp_dir "${TMPDIR_MOUNT}"
	;;
"srv_phpunit")
	SRV_MW_CORE="${SRV_MW_DIR}/core"
	sync_srv_mediawiki || exit $?
	prepare_mw_temp_dir "${TMPDIR_MOUNT}" || exit $?
	execute_mw_phpunit "${SRV_MW_CORE}" "${TMPDIR_MOUNT}" 2>&1 | less -R
	clean_mw_temp_dir "${TMPDIR_MOUNT}"
	;;
"srv_paratest")
	SRV_MW_CORE="${SRV_MW_DIR}/core"
	sync_srv_mediawiki || exit $?
	prepare_mw_temp_dir "${TMPDIR_MOUNT}" || exit $?
	prepare_mw_paratest_phpunit_config "${SRV_MW_CORE}" || exit $?
	execute_mw_paratest "${SRV_MW_CORE}" "${TMPDIR_MOUNT}" 2>&1 | less -R
	clean_mw_paratest_phpunit_config "${SRV_MW_CORE}"
	clean_mw_temp_dir "${TMPDIR_MOUNT}"
	;;
*)
	echo "Invalid command: ${COMMAND}" >&2
	print_usage
	exit 127
	;;
esac
