#!/usr/bin/env bash

REAL_PATH=$(realpath "$0")
CORE_UTILS_DIR=$(dirname "$REAL_PATH")
BASE_DIR=$(dirname "$CORE_UTILS_DIR")
SCRIPT_BASENAME=$(basename "$REAL_PATH")
TMP_SUBDIR_NAME="mediawiki-phpunit"

COMMAND=$1
shift 1
declare -a ARGS=("$@")

function print_usage() {
	echo "Usage: ${SCRIPT_BASENAME} <dev_phpunit|dev_paratest|srv_phpunit|srv_paratest>"
}

function prepare_tmpfs_temp_dir() {
	local TMPDIR_MOUNT=$1
	local TMPDIR_MEDIAWIKI="${TMPDIR_MOUNT}/${TMP_SUBDIR_NAME}"

	if [ ! -d "${TMPDIR_MOUNT}" ]; then
		echo "Invalid temp file mount path: ${TMPDIR_MOUNT}" >&2
		exit 127
	fi

	echo -n "Clearing '${TMPDIR_MEDIAWIKI}'..."
	sudo -u www-data mkdir -p "${TMPDIR_MEDIAWIKI}"
	sudo -u www-data rm -rf "${TMPDIR_MEDIAWIKI}/*" || exit $?
	echo "done"
}

function sync_srv_mediawiki() {
	# Make sure ~/bin/git is used for Linux/WIN32 executable selection
	sudo -u www-data --preserve-env=DEV_MW_DIR,SRV_MW_DIR "${BASE_DIR}/utils/sync-srv-mediawiki"
}

function get_preserved_variables() {
  printenv | grep -Po 'PHPUNIT_[^=]+' | sed ':a;N;$!ba;s/\n/,/g'
}

function execute_mediawiki_phpunit() {
	local MW_CORE_DIR=$1
	local TMPFS_DIR=$2

	(
		set -e
		cd "$MW_CORE_DIR"

    # Preserve environmental variables used to select test backends
		PRESERVE_ENV=$(get_preserved_variables)
		if [ -n "${PRESERVE_ENV}" ]; then
		  echo "Environmental variables: ${PRESERVE_ENV}"
		fi

		exec sudo -u www-data -H --preserve-env="${PRESERVE_ENV}" \
		  TMPDIR="${TMPFS_DIR}" php "${PHP_ARGS[@]}" \
			"./tests/phpunit/phpunit.php" \
			--colors=always \
			"${ARGS[@]}" 2>&1
	)
}

function execute_mediawiki_paratest() {
	local MW_CORE_DIR=$1
	local TMPFS_DIR=$2
	local PARATEST_BIN="",
	local PRESERVE_ENV=""
	local TMPDIR_MEDIAWIKI="${TMPFS_DIR}/${TMP_SUBDIR_NAME}"

	PARATEST_BIN="${HOME}/.config/composer/vendor/bin/paratest"
	if [ ! -x "${PARATEST_BIN}" ]; then
		echo "Could not find paratest; is composer/vendor/bin in PATH?"
		exit 1
	fi

	(
		set -e
		cd "$MW_CORE_DIR"

		# XXX: ugly work-around poorly divided suites
		if [ "${BASE_DIR}/config/mw_core_suite.xml" -nt "./tests/phpunit/mw_core_suite.xml" ]; then
			sudo -u www-data -H cp "${BASE_DIR}/config/mw_core_suite.xml" "./tests/phpunit/" || exit $?

		fi

		# XXX: work around sqlite DB concurrency limitations
		if ! tail -1 './LocalSettings.php' | grep 'ParatestSettings.php' -q; then
		  echo "ParatestSettings.php must be required in the last LocalSettings.php line"
		  exit 1
		fi

    # Preserve environmental variables used to select test backends
		PRESERVE_ENV=$(get_preserved_variables)
		if [ -n "${PRESERVE_ENV}" ]; then
		  echo "Environmental variables detected: ${PRESERVE_ENV}"
		fi

		# XXX: use the custom phpunit.php for proper bootstrapping and handling of --conf.
		# Since this already takes care of bootstrapping via MediaWikiPHPUnitCommand, give
		# paratest a dummy bootstrap file in order to avoid shutdown warnings.
		exec sudo -u www-data -H --preserve-env="${PRESERVE_ENV}" \
		  TMPDIR="${TMPDIR_MEDIAWIKI}" "${PARATEST_BIN}" \
			--phpunit="tests/phpunit/phpunit.php" \
			--configuration="tests/phpunit/mw_core_suite.xml" \
			--bootstrap="${BASE_DIR}/config/dummy.php" \
			--colors \
			--parallel-suite \
			--passthru-php="${PHP_ARGS[*]}" \
			--passthru="${ARGS[*]}"
	)
}

declare TMPDIR_MOUNT
# Try to use a tmpfs for temporary test files
if [ "$(findmnt -no fstype -T /tmp 2>/dev/null)" == "tmpfs" ]; then
	TMPDIR_MOUNT="/tmp"
	echo "Using main tmpfs directory: /tmp"
elif [ "$(findmnt -no fstype -T /tmp-phpunit 2>/dev/null)" == "tmpfs" ]; then
	TMPDIR_MOUNT="/tmp-phpunit"
	echo "Using dedicated tmpfs directory: /tmp-phpunit"
else
	TMPDIR_MOUNT="/tmp"
	echo "Temporary directory is not a tmpfs; tests might be slow" >&2
fi

declare -a PHP_ARGS
# Optimize execution via OPCache
if [ -d /opcache/php ]; then
	echo "Using shared OPCache directory: /opcache/php"
	PHP_ARGS+=("-d opcache.enable=1")
	PHP_ARGS+=("-d opcache.enable_cli=1")
	PHP_ARGS+=("-d opcache.file_cache=/opcache/php")
	PHP_ARGS+=("-d opcache.file_cache_only=1")
	PHP_ARGS+=("-d opcache.lockfile_path=/opcache/php")
fi

# Note that the "development path" just means $PWD in this context.
# This allows for easy testing of multiple checkouts of MediaWiki.
case $COMMAND in
"dev_phpunit")
	prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
	execute_mediawiki_phpunit . "${TMPDIR_MOUNT}" 2>&1 | less -R
	;;
"dev_paratest")
	prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
	execute_mediawiki_paratest . "${TMPDIR_MOUNT}" 2>&1 | less -R
	;;
"srv_phpunit")
	if [ -z "${SRV_MW_DIR}" ]; then
		echo "SRV_MW_DIR (webserver mediawiki directory) is not set"
		exit 1
	fi
	SRV_MW_CORE="${SRV_MW_DIR}/core"
	sync_srv_mediawiki || exit $?
	prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
	execute_mediawiki_phpunit "${SRV_MW_CORE}" "${TMPDIR_MOUNT}" 2>&1 | less -R
	;;
"srv_paratest")
	if [ -z "${SRV_MW_DIR}" ]; then
		echo "SRV_MW_DIR (webserver mediawiki directory) is not set"
		exit 1
	fi
	SRV_MW_CORE="${SRV_MW_DIR}/core"
	sync_srv_mediawiki || exit $?
	prepare_tmpfs_temp_dir "${TMPDIR_MOUNT}" || exit $?
	execute_mediawiki_paratest "${SRV_MW_CORE}" "${TMPDIR_MOUNT}" 2>&1 | less -R
	;;
*)
	echo "Invalid command: ${COMMAND}" >&2
	print_usage
	exit 127
	;;
esac
