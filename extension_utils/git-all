#!/usr/bin/env bash

GERRIT_URL_SSH="ssh://gerrit.wikimedia.org:29418"
GERRIT_URL_HTTPS="https://gerrit.wikimedia.org"

# Note: this handles the case where the bash script is a symlink to the Git repo version
SCRIPT_BASENAME=$(basename "$(realpath "$0")")
DIRECTORY=$(basename "$(pwd -P)")

OPERATION=$1
SUMMARY=$2

if [ "$DIRECTORY" == "extensions" ]; then
  GERRIT_EXT_DIR="mediawiki/extensions/"
  EXTLIST_ALL_URL="${GERRIT_URL_HTTPS}/r/projects/?format=text&b=master&p=mediawiki%2Fextensions%2F"
  EXTLIST_ALL_REGEX='^[a-f0-9]{40} mediawiki/extensions/[^/]+$'
  EXTLIST_WMF_URL="https://raw.githubusercontent.com/wikimedia/OPERATIONs-mediawiki-config/master/wmf-config/extension-list"
  EXTLIST_WMF_REGEX='^\$IP/extensions/[^/]+/[^/]+$'
elif [ "$DIRECTORY" == "skins" ]; then
  GERRIT_EXT_DIR="mediawiki/skins/"
  EXTLIST_ALL_URL="${GERRIT_URL_HTTPS}/r/projects/?format=text&b=master&p=mediawiki%2Fskins%2F"
  EXTLIST_ALL_REGEX='^[a-f0-9]{40} mediawiki/skins/[^/]+$'
  EXTLIST_WMF_URL="https://raw.githubusercontent.com/wikimedia/OPERATIONs-mediawiki-config/master/wmf-config/extension-list"
  EXTLIST_WMF_REGEX='^\$IP/skins/[^/]+/[^/]+$'
else
	echo "${SCRIPT_BASENAME} must run in the 'extensions' or 'skins' directory" >&2
	exit 127
fi

function print_usage() {
	echo "Usage: ${SCRIPT_BASENAME} <sync|commit|push|reset|review|update|gc> [message]"
}

function cmd_update_remote() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2

	if [ ! -d "./${REPO}/.git" ]; then
		repo_init_update_remote "${REPO}" "${REMOTE_ORIGIN_SHA1}"
	else
		repo_update_remote "${REPO}" "${REMOTE_ORIGIN_SHA1}"
	fi
}

function repo_init_update_remote() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local BYPASSED

		BYPASSED=$(repo_bypass_creation_if_archived "${REPO}")
		[[ "${BYPASSED}" -ne 1 ]] || exit 0

		echo "Initializing ${REPO}"

		mkdir -p "${REPO}"
		cd "./${REPO}"
		git init -q
		git config core.filemode false
		git remote add origin "${GERRIT_URL_SSH}/${GERRIT_EXT_DIR}${REPO}"
		git remote update >/dev/null
		git checkout master -fq
		git submodule update --recursive --remote
	)
}

function repo_update_remote() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local INDEX_SYNCED SALTED

		ORIGIN_SYNCED=$(local_origin_matches_upstream_origin "${REPO}" "${REMOTE_ORIGIN_SHA1}")
		[[ "${ORIGIN_SYNCED}" -ne 1 ]] || exit 0

		echo "Updating ${REPO} to include ${REMOTE_ORIGIN_SHA1:0:7}"

		mkdir -p "${REPO}"
		cd "./${REPO}"
		timeout 120 git remote update origin >/dev/null
	)
}

function cmd_sync_origin_master() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2

	if [ ! -d "./${REPO}" ]; then
		repo_clone_checkout_master "${REPO}" "${REMOTE_ORIGIN_SHA1}"
	else
		repo_update_reset_origin_master "${REPO}" "${REMOTE_ORIGIN_SHA1}"
	fi
}

function repo_clone_checkout_master() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local BYPASSED

		BYPASSED=$(repo_bypass_creation_if_archived "${REPO}")
		[[ "${BYPASSED}" -ne 1 ]] || exit 0

		git clone "${GERRIT_URL_SSH}/${GERRIT_EXT_DIR}${REPO}"

		cd "./${REPO}"
		git config core.filemode false
		git checkout master -qf
		git submodule update --recursive --remote
	)
}

function repo_update_reset_origin_master() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local ORIGIN_SYNCED INDEX_SYNCED SALTED CHANGES

		INDEX_SYNCED=$(head_matches_upstream_origin "${REPO}" "${REMOTE_ORIGIN_SHA1}")
		[[ "${INDEX_SYNCED}" -ne 1 ]] || exit 0

		ORIGIN_SYNCED=$(local_origin_matches_upstream_origin "${REPO}" "${REMOTE_ORIGIN_SHA1}")

		echo "Updating ${REPO} to include ${REMOTE_ORIGIN_SHA1:0:7}"

		cd "./${REPO}"
		CHANGES=$(git status -s --ignore-submodules --untracked-files=no | wc -l)
		[ "$CHANGES" -ge 0 ] || git stash
		[[ "${ORIGIN_SYNCED}" -eq 1 ]] || timeout 60 git remote update origin >/dev/null
		git checkout master -qf
		git reset --hard origin/master
		timeout 60 git submodule update --init
	)
}

function cmd_commit() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	local SUMMARY=$3
	(
		set -e
		local CHANGES

		cd "./${REPO}"
		CHANGES=$(git status -s --ignore-submodules --untracked-files=no)
		if [ -n "${CHANGES}" ]; then
			git commit -a -m "${SUMMARY}"
		fi
	)
}

function cmd_push_and_reset_origin_master() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local INDEX_SYNCED CHANGES

		INDEX_SYNCED=$(head_matches_upstream_origin "${REPO}" "${REMOTE_ORIGIN_SHA1}")
		[[ "${INDEX_SYNCED}" -ne 1 ]] || exit 0

		cd "./${REPO}"
		CHANGES=$(git log --oneline origin/master..HEAD)
		if [ -n "${CHANGES}" ]; then
			timeout 60 git remote update
			timeout 60 git push -f
			git reset --hard origin/master
		fi
	)
}

function cmd_review_and_reset_origin_master() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local INDEX_SYNCED CHANGES

		INDEX_SYNCED=$(head_matches_upstream_origin "${REPO}" "${REMOTE_ORIGIN_SHA1}")
		[[ "${INDEX_SYNCED}" -ne 1 ]] || exit 0

		cd "./${REPO}"
		CHANGES=$(git log --oneline origin/master..HEAD | wc -l)
		if [ "${CHANGES}" -eq 1 ]; then
			timeout 60 git remote update
			timeout 60 git-review
			git reset --hard origin/master
		elif [ "${CHANGES}" -gt 1 ]; then
			echo "Repo ${REPO} has multiple commits...skipping" >&2
		fi
	)
}

function cmd_reset_origin_master() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	(
		set -e
		local SALTED INDEX_SYNCED CHANGES VALID_GIT_REPO

		SALTED=$(repo_salt_if_archived "${REPO}")
		[[ "${SALTED}" -ne 1 ]] || exit 0

		# Note that REMOTE_ORIGIN_SHA1 might be higher than what is known in .git
		INDEX_SYNCED=$(head_matches_upstream_origin "${REPO}" "${REMOTE_ORIGIN_SHA1}")
		if [[ "${INDEX_SYNCED}" -ne 1 ]]; then
			# Check if the repo is in working condition
			echo -n "Checking integrity of ${REPO}..."
			VALID_GIT_REPO=$(check_git_repo_is_valid "${REPO}")
			echo "done"
			# Rebuild the entire Git repo if it got hosed somehow
			if [ -z "$VALID_GIT_REPO" ]; then
				echo -n "Repo ${REPO} is corrupt; removing..."
				rm -rf "./${REPO}/.git"
				echo 'done'
				repo_init_update_remote "${REPO}" "${REMOTE_ORIGIN_SHA1}"
				exit 0
			fi
		fi

		cd "./${REPO}"
		# Stash any working copy changes checkout/reset master
		CHANGES=$(git status -s --ignore-submodule --untracked-file=no | wc -l)
		[ "$CHANGES" -ge 0 ] || git stash
		if [[ "${INDEX_SYNCED}" -ne 1 ]]; then
			echo "Resetting ${REPO} to ${REMOTE_ORIGIN_SHA1:0:7}"
			git checkout master -qf
			git reset --hard origin/master
		fi
		git submodule foreach git clean -x -f -d
		git submodule foreach git reset --hard
	)
}

function cmd_gc() {
	local REPO=$1
	(
		set -e

		cd "./${REPO}"
		echo -n "Compressing ${REPO}..."
		git gc
		echo "done"
	)
}

function check_git_repo_is_valid() {
	local REPO=$1
	(
		set +e

		cd "./${REPO}" || exit $?
		git rev-parse HEAD 1>/dev/null || exit 0
		echo 1
	) 2>/dev/null

	exit 0
}

function local_origin_matches_upstream_origin() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	local LOCAL_ORIGIN_MASTER_HEAD_SHA1_FILE="${REPO}/.git/refs/remotes/origin/master"
	local FETCH_HEAD_FILE="${REPO}/.git/FETCH_HEAD"
	(
		set +e
		local LOCAL_ORIGIN_SHA1

		[ -n "${REMOTE_ORIGIN_SHA1}" ] || exit 127

		# https://stackoverflow.com/a/46163991
		IFS= read -r -d '' LOCAL_ORIGIN_SHA1 <"$LOCAL_ORIGIN_MASTER_HEAD_SHA1_FILE"
		if [ "${LOCAL_ORIGIN_SHA1//$'\n'/}" == "${REMOTE_ORIGIN_SHA1}" ]; then
			echo 1
			exit 0
		fi

		# shellcheck disable=SC2034
		while IFS=$'\t\n' read -r local_remote_sha1 ignored; do
			if [ "${local_remote_sha1}" == "${REMOTE_ORIGIN_SHA1}" ]; then
				echo 1
				exit 0
			fi
		done < "${FETCH_HEAD_FILE}"

		# Slower, more thorough check
		cd "./${REPO}" || exit $?
		if [ "$(git show-ref -s origin/master)" == "${REMOTE_ORIGIN_SHA1}" ]; then
			echo 1
			exit 0
		fi
	) 2>/dev/null

	exit 0
}

function head_matches_upstream_origin() {
	local REPO=$1
	local REMOTE_ORIGIN_SHA1=$2
	local LOCAL_HEAD_FILE="${REPO}/.git/HEAD"
	local LOCAL_MASTER_HEAD_SHA1_FILE="${REPO}/.git/refs/heads/master"
	local INFO_REFS_FILE="${REPO}/.git/info/refs"
	(
		set +e
		local LOCAL_HEAD LOCAL_MASTER_SHA1

		[ -n "${REMOTE_ORIGIN_SHA1}" ] || exit 127

		# https://stackoverflow.com/a/46163991
		IFS= read -r -d '' LOCAL_HEAD <"$LOCAL_HEAD_FILE"
		[ "${LOCAL_HEAD//$'\n'/}" == "ref: refs/heads/master" ] || exit 0

		# https://stackoverflow.com/a/46163991
		IFS= read -r -d '' LOCAL_MASTER_SHA1 <"$LOCAL_MASTER_HEAD_SHA1_FILE"
		if [ "${LOCAL_MASTER_SHA1//$'\n'/}" == "${REMOTE_ORIGIN_SHA1}" ]; then
			echo 1
			exit 0
		fi

		while IFS=$'\t\n' read -r ref_sha1 ref; do
			[ "${ref}" == "refs/heads/master" ] || continue
			if [ "${ref_sha1}" == "${REMOTE_ORIGIN_SHA1}" ]; then
				echo 1
				exit 0
			fi
		done < "${INFO_REFS_FILE}"

		# Slower, more thorough check
		cd "./${REPO}" || exit $?
		if [ "$(git rev-parse HEAD)" == "${REMOTE_ORIGIN_SHA1}" ]; then
			echo 1
			exit 0
		fi
	) 2>/dev/null

	exit 0
}

function repo_salt_if_archived() {
	local REPO=$1
	local FILES_CHECK=("${REPO}/ARCHIVED" "${REPO}/OBSOLETE" "${REPO}/OBSOLETE.txt")
	(
		set +e

		for FILE_CHECK in "${FILES_CHECK[@]}"; do
			if [ -f "./${FILE_CHECK}" ]; then
				echo -n "Marking ${REPO} as ignored..." >&2
				rm -rf "./${REPO}/*"
				echo -n >"./${REPO}/IGNORE"
				echo "done" >&2
				echo 1
			fi
		done
	)

	exit 0
}

function repo_bypass_creation_if_archived() {
	local REPO=$1
	local PREFIX="${GERRIT_URL_HTTPS}/r/plugins/gitiles/${GERRIT_EXT_DIR}${REPO}/+/master/"
	local FILES_CHECK=("${PREFIX}/ARCHIVED" "${PREFIX}/OBSOLETE" "${PREFIX}/OBSOLETE.txt")
	(
		set +e

		declare -i COUNT
		COUNT=$(curl -sL --head "${FILES_CHECK[@]}" | grep -Pc '^\s*HTTP/\d(\.\d)?\s2\d\d\s')
		if [ "$COUNT" -ge 1 ]; then
			echo "Marked ${REPO} as ignored" >&2
			mkdir -p "${REPO}"
			echo -n >"./${REPO}/IGNORE"
			echo 1
		fi
	)

	exit 0
}

function get_upstream_plugins_wmf() {
	# Exclude nested repositories for directory layout sanity
	# shellcheck disable=SC2016
	curl -sL "${EXTLIST_WMF_URL}" | grep -P "${EXTLIST_WMF_REGEX}" | awk -F/ '{print $3}' | sort -u
}

function get_upstream_plugins_all() {
	# Exclude nested repositories for directory layout sanity
	curl -sL "${EXTLIST_ALL_URL}" | grep -P "${EXTLIST_ALL_REGEX}" | awk -F'[/ ]' '{print $1 "|" $4}'
}

function git_command_all() {
	# Stay under hard-coded server-side connection limit (4) with 1 connection to spare
	# so that the user can do other gerrit operations while this runs in the background.
	declare -i PROCESSORS=3

	if [ -z "${OPERATION}" ]; then
		print_usage
		exit 1
	fi

	declare -A REMOTE_SHA1_BY_REPO
	echo -n "Enumerating plugin repos under '${GERRIT_EXT_DIR}'..."
	# shellcheck disable=SC2162
	while IFS='|' read -r sha1 name; do
		#echo "Found upstream repo '$name'"
		if [[ -v REMOTE_SHA1_BY_REPO[$name] ]]; then
			echo "Duplicate REMOTE_SHA1_BY_REPO entry '$name' (hazard)!" >&2
			exit 1
		fi
		REMOTE_SHA1_BY_REPO[$name]="$sha1"
	done <<<"$(get_upstream_plugins_all)"
	echo "done"

	# Figure out which repos this command will actually affect
	declare -A REMOTE_SHA1_BY_TARGET_REPO
	if [ -n "${GIT_ALL_WMF_ONLY}" ]; then
		declare -a WMF_DEPLOYED_REPOS
		echo -n "Enumerating WMF-deployed plugin repos under '${GERRIT_EXT_DIR}'..."
		mapfile -t WMF_DEPLOYED_REPOS < <(get_upstream_plugins_wmf)
		for name in "${WMF_DEPLOYED_REPOS[@]}"; do
			if [[ ! -v REMOTE_SHA1_BY_REPO[$name] ]]; then
				echo "Missing REMOTE_SHA1_BY_REPO entry for '$name'!" >>/dev/stderr
				exit 1
			elif [[ -v REMOTE_SHA1_BY_TARGET_REPO[$name] ]]; then
				echo "Duplicate WMF_DEPLOYED_REPOS entry '$name'!" >>/dev/stderr
				exit 1
			fi
			#echo "Using repo '$name'"
			REMOTE_SHA1_BY_TARGET_REPO[$name]=${REMOTE_SHA1_BY_REPO[$name]}
		done
		echo "done"
	else
		for name in "${!REMOTE_SHA1_BY_REPO[@]}"; do
			REMOTE_SHA1_BY_TARGET_REPO[$name]=${REMOTE_SHA1_BY_REPO[$name]}
		done
	fi

	declare COMMAND
	case $OPERATION in
	"update")
		COMMAND='cmd_update_remote'
		;;
	"sync")
		COMMAND='cmd_sync_origin_master'
		;;
	"commit")
		COMMAND='cmd_commit'
		;;
	"push")
		COMMAND='cmd_push_and_reset_origin_master'
		;;
	"review")
		COMMAND='cmd_review_and_reset_origin_master'
		;;
	"reset")
		COMMAND='cmd_reset_origin_master'
		;;
	"gc")
		COMMAND='cmd_gc'
		;;
	*)
		echo "Invalid command: ${OPERATION}" >>/dev/stderr
		print_usage
		exit 127
		;;
	esac

	set -m
	declare -i CHILD_JOB_COUNT=0
	trap "wait && exit" INT
	for REPO in "${!REMOTE_SHA1_BY_TARGET_REPO[@]}"; do
		if [ -f "./${REPO}/IGNORE" ]; then
			#echo "Skipping ${REPO} (IGNORE file)"
			continue
		fi

		(
			declare REMOTE_ORIGIN_SHA1=${REMOTE_SHA1_BY_TARGET_REPO[$REPO]}

			declare OUT
			OUT=$($COMMAND "${REPO}" "${REMOTE_ORIGIN_SHA1}" "${SUMMARY}" 2>&1)
			declare -i CODE=$?

			if [ $CODE -ne 0 ]; then
				echo -e "[${REPO}] (upstream: ${REMOTE_ORIGIN_SHA1:0:7}) FAILED:\n${OUT}"
			elif [ -n "${OUT}" ]; then
				echo -e "[${REPO}] (upstream: ${REMOTE_ORIGIN_SHA1:0:7}) OK:\n${OUT}"
			fi

			exit $CODE
		) &

		# Move on to the wait loop only if there are no open job slots.
		# Otherwise, immediately move on to the next repo.
		CHILD_JOB_COUNT=$((CHILD_JOB_COUNT + 1))
		while [ "$CHILD_JOB_COUNT" -ge "$PROCESSORS" ]; do
			wait -n
			# Try to propagate SIGINT upward
			[ $! -ne 130 ] || exit $!
			CHILD_JOB_COUNT=$(jobs -r | wc -l)
		done
	done
	wait
}

git_command_all
