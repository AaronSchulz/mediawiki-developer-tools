#!/usr/bin/env bash

if [ -z "${DEV_MW_DIR}" ]; then
	echo "DEV_MW_DIR (IDE mediawiki directory) is not set"
	exit 1;
elif [ -z "${SRV_MW_DIR}" ]; then
	echo "SRV_MW_DIR (webserver mediawiki directory) is not set"
	exit 1;
fi

# Variables that depend on the OS that owns the "development" MediaWiki directory
if [ -d "/mnt/c/WINDOWS/System32" ]; then
	WSL_MODE=1
	if [ ! -f "/mnt/c/Program Files/Git/bin/git.exe" ]; then
		echo "Could not detect Git for Windows (https://git-scm.com/download/win)"
		exit 1
	fi
	# ~/bin/find only picks the executable based on $PWD, not the path arguments to "find"
	DEV_OS_FIND_BIN="/mnt/c/Program Files/Git/usr/bin/find.exe"
else
	WSL_MODE=
	DEV_OS_FIND_BIN="/bin/find"
fi
# Customizable "development" base MediaWiki directory (used by IDE)
DEV_MW_CORE="${DEV_MW_DIR}/core"
DEV_MW_SKINS="${DEV_MW_DIR}/skins"
DEV_MW_EXTENSIONS="${DEV_MW_DIR}/extensions"
# Customizable "server" base MediaWiki directory (used by web server)
SRV_MW_CORE="${SRV_MW_DIR}/core"
SRV_MW_SKINS="${SRV_MW_DIR}/skins"
SRV_MW_EXTENSIONS="${SRV_MW_DIR}/extensions"
# Customizable name of user that owns the "server" MediaWiki files
SRV_USER=${SRV_USER:-"www-data"}

declare MTIME_FORMAT="%TT %TD"
declare -A MTIME_CACHE

declare -i PROCESSORS
PROCESSORS=$(nproc)

if [ "$(whoami)" != "${SRV_USER}" ]; then
	echo "Script must be run as user '${SRV_USER}'"
	exit 1
fi

if [ ! -d "${DEV_MW_DIR}" ]; then
	echo "DEV_MW_DIR (${DEV_MW_DIR}) does not exist"
	exit 1
elif [ ! -w "${SRV_MW_DIR}" ]; then
	echo "SRV_MW_DIR (${SRV_MW_DIR}) does not exist or is not writable"
	exit 1
fi

function sync_project_code() {
	local SRC=$1
	local DST=$2
	local SRC_GIT_INDEX="${SRC}/.git/index"
	local DST_GIT_INDEX="${DST}/.git/index"
	local SRC_VENDOR="${SRC}/vendor"
	local DST_VENDOR="${DST}/vendor"
	local SRC_NPM="${SRC}/node_modules"
	local DST_NPM="${DST}/node_modules"

	local SRC_GIT_MTIME DST_GIT_MTIME
	local SRC_VENDOR_MTIME DST_VENDOR_MTIME
	local SRC_NODE_MTIME DST_NODE_MTIME

	SRC_GIT_MTIME=$(file_mtime "${SRC_GIT_INDEX}")
	DST_GIT_MTIME=$(file_mtime "${DST_GIT_INDEX}")
	if [ -z "${SRC_GIT_MTIME}" ]; then
		if [ -n "$(file_mtime "${SRC}/IGNORE")" ]; then
			# Repo was removed from gerrit at some point
			exit 0
		else
			# There should be a .git directory and index
			echo "File not found: ${SRC_GIT_INDEX}" >&2
			exit 2
		fi
	elif [ "${SRC_GIT_MTIME}" != "${DST_GIT_MTIME}" ]; then
		echo "Git repo: ${DST} (@${DST_GIT_MTIME} -> @${SRC_GIT_MTIME})"
		rsync -dq "${SRC}/" "${DST}" || exit 1
		rsync -rltDiq "${SRC}/.git/" "${DST}/.git" || exit 1

		# Synchronize the destination using Git commands
		(
			local CHANGES
			cd "${DST}" || exit 1
			CHANGES="$(git status -s --porcelain --untracked-files=no)"
			if [ -n "${CHANGES}" ]; then
				echo "${SRC} -> ${DST} (checkout)"
				echo "${CHANGES}"
				# Reset working directory to Git HEAD
				git reset --hard 1>/dev/null || exit 1
				# Purge excess files (ignoring composer/npm and dirs with a .git dir)
				git clean -xfd \
					--exclude='vendor/**' --exclude='node_modules/**' --exclude='*Settings.php' \
					1>/dev/null || exit 1
			fi
		) || exit 1

		# Mark git/working directory as updated
		touch -m --date "${SRC_GIT_MTIME}" "${DST}/.git/index"
	fi

	# Synchronize composer files that are not in the Git repo
	SRC_VENDOR_MTIME=$(file_mtime "${SRC_VENDOR}")
	if [ -n "${SRC_VENDOR_MTIME}" ]; then
		DST_VENDOR_MTIME=$(file_mtime "${DST_VENDOR}")
		if [ "${SRC_VENDOR_MTIME}" != "${DST_VENDOR_MTIME}" ]; then
			echo "Vendor: ${DST} (@${DST_VENDOR_MTIME} -> @${SRC_VENDOR_MTIME})"
			rsync -rltDiq "${SRC_VENDOR}/" "${DST_VENDOR}" || exit 1
			touch -m --date "${SRC_VENDOR_MTIME}" "${DST_VENDOR}" || exit 1
		fi
	fi

	# Synchronize NPM files that are not in the Git repo
	SRC_NODE_MTIME=$(file_mtime "${SRC_NPM}")
	if [ -n "${SRC_NODE_MTIME}" ]; then
		DST_NODE_MTIME=$(file_mtime "${DST_NPM}")
		if [ "${SRC_NODE_MTIME}" != "${DST_NODE_MTIME}" ]; then
			echo "NPM: ${DST} (@${DST_NODE_MTIME} -> @${SRC_NODE_MTIME})"
			rsync -rltDiq "${SRC_NPM}/" "${DST_NPM}" || exit 1
			touch -m --date "${SRC_NODE_MTIME}" "${DST_NPM}" || exit 1
		fi
	fi
}

function sync_dir_subprojects() {
	local SRC=$1
	local DST=$2
	shift 2
	local PROJECT_NAMES=("$@")

	local SRC_PROJECT_ROOT DST_PROJECT_ROOT

	prestat_dir_projects "${SRC}" "${DST}" "${PROJECT_NAMES[@]}" || exit $?

	set -m
	declare -i CHILD_JOB_COUNT=0
	trap "wait && exit" INT
	for PROJECT_NAME in "${PROJECT_NAMES[@]}"; do
		SRC_PROJECT_ROOT="${SRC}/${PROJECT_NAME}"
		DST_PROJECT_ROOT="${DST}/${PROJECT_NAME}"
		sync_project_code "${SRC_PROJECT_ROOT}" "${DST_PROJECT_ROOT}" &
		CHILD_JOB_COUNT=$((CHILD_JOB_COUNT + 1))
		while [ "$CHILD_JOB_COUNT" -ge "$PROCESSORS" ]; do
			wait -n
			# Try to propagate SIGINT upward
			[[ $? -ne 130 ]] && [[ $? -ne 2 ]] || exit $?
			CHILD_JOB_COUNT=$(jobs -r | wc -l)
		done
	done
	wait
}

function prestat_dir_projects() {
	local SRC=$1
	local DST=$2
	shift 2
	local PROJECT_NAMES=("$@")

	local SRC_PROJECT DST_PROJECT FILE_PATH CODE=0

	# Initialize a NULL last-modified timestamp for each NTFS file to stat
	for PROJECT_NAME in "${PROJECT_NAMES[@]}"; do
		SRC_PROJECT="${SRC}/${PROJECT_NAME}"
		MTIME_CACHE["${SRC_PROJECT}/.git/index"]=""
		MTIME_CACHE["${SRC_PROJECT}/vendor"]=""
		MTIME_CACHE["${SRC_PROJECT}/node_modules"]=""
		MTIME_CACHE["${SRC_PROJECT}/IGNORE"]=""

		DST_PROJECT="${DST}/${PROJECT_NAME}"
		MTIME_CACHE["${DST_PROJECT}/.git/index"]=""
		MTIME_CACHE["${DST_PROJECT}/vendor"]=""
		MTIME_CACHE["${DST_PROJECT}/node_modules"]=""
	done
	# Preload the last-modified timestamp for each of these source files that exist
	if [ -n "${WSL_MODE}" ]; then
		# Git for Windows uses "/c/" instead of "/mnt/c/" and a different escape character
		while IFS=$'|\n' read -r relative_path last_modified && CODE=$?; do
			FILE_PATH="${SRC}/${relative_path}"
			#echo "StatLoad [${FILE_PATH}] = ${last_modified}"
			MTIME_CACHE[$FILE_PATH]="${last_modified}"
		done < <(
			"${DEV_OS_FIND_BIN}" "${SRC/#\/mnt\//\/}" \
			-mindepth 2 -maxdepth 3 \( \
				-path "\*/.git/index" -o \
				-path "\*/vendor" -o \
				-path "\*/node_modules" -o \
				-path "\*/IGNORE" \
			\) -printf "%P|${MTIME_FORMAT}\n"
		)
	else
		while IFS=$'|\n' read -r relative_path last_modified && CODE=$?; do
			FILE_PATH="${SRC}/${relative_path}"
			#echo "StatLoad [${FILE_PATH}] = ${last_modified}"
			MTIME_CACHE[$FILE_PATH]="${last_modified}"
		done < <(
			"${DEV_OS_FIND_BIN}" "${SRC}" \
			-mindepth 2 -maxdepth 3 \( \
				-path '*/.git/index' -o \
				-path '*/vendor' -o \
				-path '*/node_modules' -o \
				-path '*/IGNORE' \
			\) -printf "%P|${MTIME_FORMAT}\n"
		)
	fi
	[[ $CODE -eq 0 ]] || exit 2
	# Preload the last-modified timestamp for each of these destination files that exist
	while IFS=$'|\n' read -r relative_path last_modified && CODE=$?; do
		FILE_PATH="${DST}/${relative_path}"
		#echo "StatLoad [${FILE_PATH}] = ${last_modified}"
		MTIME_CACHE[$FILE_PATH]="${last_modified}"
	done < <(
		find "${DST}" \
		-mindepth 2 -maxdepth 3 \( \
			-path '*/.git/index' -o \
			-path '*/vendor' -o \
			-path '*/node_modules' \
		\) -printf "%P|${MTIME_FORMAT}\n"
	)
	[[ $CODE -eq 0 ]] || exit 2
}

function sync_project_config() {
	local SRC=$1
	local DST=$2

	rsync -rltDiq --include '*Settings.php' --exclude '*' "${SRC}/" "${DST}/"
}

function file_mtime() {
	local FILE_PATH=$1

	local MTIME

	if [[ "${FILE_PATH}" != /* ]]; then
		echo "Path is not absolute: ${FILE_PATH}" 1>&2
		exit 127
	fi

	if [[ -v MTIME_CACHE[$FILE_PATH] ]]; then
		MTIME="${MTIME_CACHE[$FILE_PATH]}"
		#echo "StatHit [${FILE_PATH}] = ${MTIME}" >&2
	else
		# Note that find.exe is slower here than /usr/bin/find
		MTIME=$(find "${FILE_PATH}" -maxdepth 0 -printf "${MTIME_FORMAT}\n" 2>/dev/null)
		echo "StatMiss [${FILE_PATH}] = ${MTIME}" >&2
	fi

	echo "${MTIME}"
}

mkdir -p "${DEV_MW_DIR}" "${SRV_MW_SKINS}" "${SRV_MW_EXTENSIONS}" || exit 1

set -m
trap "wait && exit" INT
(
	# Set $PWD so that ~/bin/find picks the right executable
	cd "${DEV_MW_DIR}" || exit 1
	sync_dir_subprojects "${DEV_MW_DIR}" "${SRV_MW_DIR}" "core" || exit $?
	sync_project_config "${DEV_MW_CORE}" "${SRV_MW_CORE}"
) &
(
	declare -a REPOS
	# Set $PWD so that ~/bin/find picks the right executable
	cd "${DEV_MW_SKINS}" || exit 1
	for SUBDIR in */; do REPOS+=( "${SUBDIR%/*}" ); done
	sync_dir_subprojects "${DEV_MW_SKINS}" "${SRV_MW_SKINS}" "${REPOS[@]}"
) &
(
	declare -a REPOS
	# Set $PWD so that ~/bin/find picks the right executable
	cd "${DEV_MW_EXTENSIONS}" || exit 1
	for SUBDIR in */; do REPOS+=( "${SUBDIR%/*}" ); done
	sync_dir_subprojects "${DEV_MW_EXTENSIONS}" "${SRV_MW_EXTENSIONS}" "${REPOS[@]}"
) &
wait
